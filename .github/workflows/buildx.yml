name: buildx

on:
  push:
    branches:
      - 'v1.2'

env:
  IMAGE_NAME: ghcr.io/by275/libtorrent
  LT_VER: "1.2.16"
  LT_VER_MINOR: "1.2"
  LT_VER_MAJOR: "1"
  TAGS: "alpine3.13 alpine3.14 alpine3.15 ubuntu20.04 ubuntu21.10 ubuntu22.04"

jobs:
  alpine:
    runs-on: ubuntu-20.04
    if: github.event_name != 'watch' || github.actor == github.event.repository.owner.login
    strategy:
      matrix:
        distro: [alpine3.13, alpine3.14, alpine3.15]
        arch: [amd64, arm64, arm]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      -
        name: Buildx and Push
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.distro }}/.
          file: ${{ matrix.distro }}/Dockerfile
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          push: true
          build-args: |
            LT_VER=${{ env.LT_VER }}
      -
        name: Send Notification
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: |
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-${{ matrix.arch }}

  alpine-release:
    needs:
      - alpine
    runs-on: ubuntu-20.04
    if: github.event_name != 'watch' || github.actor == github.event.repository.owner.login
    strategy:
      matrix:
        distro: [alpine3.13, alpine3.14, alpine3.15]
    steps:
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      - 
        name: Create manifest and push for ${{ env.LT_VER }}-${{ matrix.distro }}
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }} \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-amd64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-arm64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-arm
          docker manifest push ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}
      - 
        name: Create manifest and push for ${{ env.LT_VER_MINOR }}-${{ matrix.distro }}
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }} \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-amd64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-arm64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-arm
          docker manifest push ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}
      - 
        name: Create manifest and push for ${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }} \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-amd64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-arm64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-arm
          docker manifest push ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}

  ubuntu:
    runs-on: ubuntu-20.04
    if: github.event_name != 'watch' || github.actor == github.event.repository.owner.login
    strategy:
      matrix:
        distro: [ubuntu20.04, ubuntu21.10, ubuntu22.04]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      -
        name: Cross Build and Load Artifacts
        run: |
          cd ${{ matrix.distro }}
          docker build --build-arg LT_VER=${{ env.LT_VER }} -t lt-build:local -f cross-build.dockerfile .
          docker run --rm -v ${PWD}/build:/build lt-build:local /bin/bash -c "rm -rf /build/* && mv /lt-build/* /build/"
      -
        name: Buildx and Push
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.distro }}/.
          file: ${{ matrix.distro }}/Dockerfile
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          build-args: |
            LT_VER=${{ env.LT_VER }}
      -
        name: Send Notification
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: |
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}

  make-release:
    needs:
      - alpine-release
      - ubuntu
    runs-on: ubuntu-20.04
    if: github.event_name != 'watch' || github.actor == github.event.repository.owner.login
    steps:
      -
        name: Load Variables
        run: |
          echo "DATE=$(date -u +'%y%m%d')" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Generate Release Assets
        run: |
          chmod +x ./release.sh
          ./release.sh ${{ env.LT_VER }} "${{ env.TAGS }}"
      -
        name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.LT_VER }}-${{ env.DATE }}
          release_name: libtorrent-${{ env.LT_VER }}-${{ env.DATE }}
          body: Auto-generated release
          draft: true
          prerelease: false
      -
        name: Upload Assets to Release with a wildcard
        uses: csexton/release-asset-action@v2
        with:
          pattern: "release/*.tar.gz"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-url: ${{ steps.create_release.outputs.upload_url }}
      -
        name: Send Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: |
            Image: ${{ env.IMAGE_NAME }}
            Tags: ${{ env.TAGS }}
