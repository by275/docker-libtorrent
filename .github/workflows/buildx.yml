name: buildx

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'

env:
  IMAGE_NAME: ghcr.io/by275/libtorrent
  LT_VER: "2.0.9"
  LT_VER_MINOR: "2.0"
  LT_VER_MAJOR: "2"
  TAGS: "alpine3.15 alpine3.16 alpine3.17 alpine3.18 ubuntu20.04 ubuntu22.04 ubuntu22.10 ubuntu23.04"

jobs:
  alpine:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distro: [alpine3.15, alpine3.16, alpine3.17, alpine3.18]
        arch: [amd64, arm64, arm]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      -
        name: Buildx and Push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.distro }}/.
          file: ${{ matrix.distro }}/Dockerfile
          tags: |
            ${{ env.IMAGE_NAME }}:latest-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-${{ matrix.arch }}
          platforms: linux/${{ matrix.arch }}
          push: true
          build-args: |
            LT_VER=${{ env.LT_VER }}
          provenance: false
      -
        name: Send Notification
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: |
            ${{ env.IMAGE_NAME }}:latest-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-${{ matrix.arch }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-${{ matrix.arch }}

  alpine-release:
    needs:
      - alpine
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distro: [alpine3.15, alpine3.16, alpine3.17, alpine3.18]
    steps:
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      - 
        name: Create manifest and push for latest-${{ matrix.distro }}
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:latest-${{ matrix.distro }} \
            ${{ env.IMAGE_NAME }}:latest-${{ matrix.distro }}-amd64 \
            ${{ env.IMAGE_NAME }}:latest-${{ matrix.distro }}-arm64 \
            ${{ env.IMAGE_NAME }}:latest-${{ matrix.distro }}-arm
          docker manifest push ${{ env.IMAGE_NAME }}:latest-${{ matrix.distro }}
      - 
        name: Create manifest and push for ${{ env.LT_VER }}-${{ matrix.distro }}
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }} \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-amd64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-arm64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}-arm
          docker manifest push ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}
      - 
        name: Create manifest and push for ${{ env.LT_VER_MINOR }}-${{ matrix.distro }}
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }} \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-amd64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-arm64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}-arm
          docker manifest push ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}
      - 
        name: Create manifest and push for ${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}
        run: |
          docker manifest create ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }} \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-amd64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-arm64 \
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}-arm
          docker manifest push ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}

  ubuntu:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distro: [ubuntu20.04, ubuntu22.04, ubuntu22.10, ubuntu23.04]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      -
        name: Cross Build and Load Artifacts
        run: |
          cd ${{ matrix.distro }}
          docker build --build-arg LT_VER=${{ env.LT_VER }} -t lt-build:local -f cross-build.dockerfile .
          docker run --rm -v ${PWD}/build:/build lt-build:local /bin/bash -c "rm -rf /build/* && mv /lt-build/* /build/"
      -
        name: Buildx and Push
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.distro }}/.
          file: ${{ matrix.distro }}/Dockerfile
          tags: |
            ${{ env.IMAGE_NAME }}:latest-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          build-args: |
            LT_VER=${{ env.LT_VER }}
          provenance: false
      -
        name: Send Notification
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: |
            ${{ env.IMAGE_NAME }}:latest-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER }}-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MINOR }}-${{ matrix.distro }}
            ${{ env.IMAGE_NAME }}:${{ env.LT_VER_MAJOR }}-${{ matrix.distro }}

  make-release:
    needs:
      - alpine-release
      - ubuntu
    runs-on: ubuntu-22.04
    steps:
      -
        name: Load Variables
        run: |
          echo "DATE=$(date -u +'%y%m%d')" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Generate Release Assets
        run: |
          chmod +x ./release.sh
          ./release.sh ${{ env.LT_VER }} "${{ env.TAGS }}"
      -
        name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.LT_VER }}-${{ env.DATE }}
          name: libtorrent-${{ env.LT_VER }}-${{ env.DATE }}
          artifacts: "release/*.tar.gz"
          body: Auto-generated release
          draft: true
          prerelease: false
      -
        name: Send Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: |
            Image: ${{ env.IMAGE_NAME }}
            Tags: ${{ env.TAGS }}
